{"version":3,"sources":["projects/random-quote-machine/src/redux/initialState.js","projects/random-quote-machine/src/redux/actions/actionTypes.js","projects/random-quote-machine/src/redux/reducers/quotesReducer.js","projects/random-quote-machine/src/redux/store.js","projects/random-quote-machine/src/components/Quotes.jsx","projects/random-quote-machine/src/components/Container.jsx","projects/random-quote-machine/src/redux/actions/actionCreators.js","projects/random-quote-machine/src/App.jsx"],"names":["INITIAL_STATE","isFetching","quotes","colors","FETCH_QUOTES","NEW_QUOTE","quotesReducer","state","action","type","actionTypes","payload","randomIndex","store","createStore","applyMiddleware","thunk","Quotes","props","handleNewQuote","bind","this","fetchQuotes","randomQuoteIndex","Math","floor","random","length","newQuote","quote","author","icon","faSpinner","faQuoteLeft","randomColorIndex","randomColor","className","style","backgroundColor","id","color","href","target","rel","faTwitter","onClick","Component","Container","connect","dispatch","fetch","then","resp","json","data","App"],"mappings":"sQAmBeA,EAnBO,CACpBC,YAAY,EACZC,OAAQ,GACRC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YCfSC,EAAe,eACfC,EAAY,YCaVC,EAXO,WAAoC,IAAnCC,EAAkC,uDAA1BP,EAAeQ,EAAW,uCACvD,OAAQA,EAAOC,MACb,KAAKC,EACH,OAAO,2BAAKH,GAAZ,IAAmBL,OAAQM,EAAOG,QAASV,YAAY,IACzD,KAAKS,EACH,OAAO,2BAAKH,GAAZ,IAAmBK,YAAaJ,EAAOG,UACzC,QACE,OAAOJ,I,QCJEM,EAFDC,YAAYR,EAAeS,YAAgBC,M,uCCCpCC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBAFL,E,qDAInB,WACEC,KAAKH,MAAMI,cACXD,KAAKF,mB,4BAGP,WACE,IAAII,EAAmBC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKH,MAAMhB,OAAOyB,QACpEN,KAAKH,MAAMU,SAASL,K,oBAGtB,WACE,MAAwBF,KAAKH,MAAMjB,WAC/B,CAAE4B,MAAO,aAAcC,QAAQ,GAC/BT,KAAKH,MAAMhB,OAAOmB,KAAKH,MAAMN,aAF3BiB,EAAN,EAAMA,MAAOC,EAAb,EAAaA,OAGTC,EAAOV,KAAKH,MAAMjB,WAAa+B,IAAYC,IAC3CC,EAAmBV,KAAKC,MAAMD,KAAKE,SAAWL,KAAKH,MAAMf,OAAOwB,QAChEQ,EAAcd,KAAKH,MAAMf,OAAO+B,GACpC,OACE,qBAAKE,UAAU,uBAAf,SACE,qBACEA,UAAU,sBACVC,MAAO,CAAEC,gBAAiBH,GAF5B,SAIE,sBAAKI,GAAG,YAAR,UACE,6BAAYA,GAAG,QAAf,UACE,oBAAGA,GAAG,OAAOH,UAAU,YAAYC,MAAO,CAAEG,MAAOL,GAAnD,UACE,cAAC,IAAD,CAAiBJ,KAAMA,IACtBF,KAEH,mBACEU,GAAG,SACHH,UAAU,YACVC,MAAO,CAAEG,MAAOL,GAHlB,SAKGL,EAAS,KAAOA,EAASA,OAG9B,sBAAKM,UAAU,UAAf,UACE,oBACEA,UAAU,mBACVK,KACE,+EAEAZ,EAFA,OAKAC,EAEFY,OAAO,SACPC,IAAI,aACJJ,GAAG,cACHF,MAAO,CAAEC,gBAAiBH,GAb5B,UAeE,cAAC,IAAD,CAAiBJ,KAAMa,MAfzB,WAkBA,wBACER,UAAU,mBACVG,GAAG,YACHM,QAASxB,KAAKF,eACdkB,MAAO,CAAEC,gBAAiBH,GAJ5B,qC,GA7DsBW,aCiBrBC,EAFGC,aAhBM,SAACzC,GACvB,MAAO,CACLL,OAAQK,EAAML,OACdD,WAAYM,EAAMN,WAClBW,YAAaL,EAAMK,YACnBT,OAAQI,EAAMJ,WAIS,SAAC8C,GAC1B,MAAO,CACL3B,YAAa,kBAAM2B,GCbU,SAACA,GAChCC,MACE,0IAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OACJL,EAAS,CAAExC,KAAMC,EAA0BC,QAAS2C,EAAKpD,gBDQ3D0B,SAAU,SAAChB,GAAD,OAAiBqC,ECJP,SAACrC,GAAD,MAAkB,CACxCH,KAAMC,EACNC,QAASC,GDE6BgB,CAAShB,QAI/BoC,CAA6C/B,GEd1CsC,G,kKACnB,WACE,OACE,cAAC,IAAD,CAAU1C,MAAOA,EAAjB,SACE,cAAC,EAAD,U,GAJyBiC","file":"static/js/9.a9e21b5b.chunk.js","sourcesContent":["const INITIAL_STATE = {\r\n  isFetching: true,\r\n  quotes: [],\r\n  colors: [\r\n    \"#16a085\",\r\n    \"#27ae60\",\r\n    \"#2c3e50\",\r\n    \"#f39c12\",\r\n    \"#e74c3c\",\r\n    \"#9b59b6\",\r\n    \"#FB6964\",\r\n    \"#342224\",\r\n    \"#472E32\",\r\n    \"#BDBB99\",\r\n    \"#77B1A9\",\r\n    \"#73A857\",\r\n  ],\r\n};\r\n\r\nexport default INITIAL_STATE;\r\n","export const FETCH_QUOTES = \"FETCH_QUOTES\";\r\nexport const NEW_QUOTE = \"NEW_QUOTE\";\r\n","import INITIAL_STATE from \"../initialState\";\r\nimport * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst quotesReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_QUOTES:\r\n      return { ...state, quotes: action.payload, isFetching: false };\r\n    case actionTypes.NEW_QUOTE:\r\n      return { ...state, randomIndex: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default quotesReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport quotesReducer from \"./reducers/quotesReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(quotesReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faQuoteLeft, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class Quotes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNewQuote = this.handleNewQuote.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchQuotes();\r\n    this.handleNewQuote();\r\n  }\r\n\r\n  handleNewQuote() {\r\n    let randomQuoteIndex = Math.floor(Math.random() * this.props.quotes.length);\r\n    this.props.newQuote(randomQuoteIndex);\r\n  }\r\n\r\n  render() {\r\n    let { quote, author } = this.props.isFetching\r\n      ? { quote: \"Loading...\", author: false }\r\n      : this.props.quotes[this.props.randomIndex];\r\n    let icon = this.props.isFetching ? faSpinner : faQuoteLeft;\r\n    let randomColorIndex = Math.floor(Math.random() * this.props.colors.length);\r\n    let randomColor = this.props.colors[randomColorIndex];\r\n    return (\r\n      <div className=\"random-quote-machine\">\r\n        <div\r\n          className=\"container animation\"\r\n          style={{ backgroundColor: randomColor }}\r\n        >\r\n          <div id=\"quote-box\">\r\n            <blockquote id=\"quote\">\r\n              <p id=\"text\" className=\"animation\" style={{ color: randomColor }}>\r\n                <FontAwesomeIcon icon={icon} />\r\n                {quote}\r\n              </p>\r\n              <p\r\n                id=\"author\"\r\n                className=\"animation\"\r\n                style={{ color: randomColor }}\r\n              >\r\n                {author ? \"- \" + author : author}\r\n              </p>\r\n            </blockquote>\r\n            <div className=\"buttons\">\r\n              <a\r\n                className=\"button animation\"\r\n                href={\r\n                  \"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\" +\r\n                  '\"' +\r\n                  quote +\r\n                  '\" ' +\r\n                  \"- \" +\r\n                  author\r\n                }\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                id=\"tweet-quote\"\r\n                style={{ backgroundColor: randomColor }}\r\n              >\r\n                <FontAwesomeIcon icon={faTwitter} />\r\n                Tweet\r\n              </a>\r\n              <button\r\n                className=\"button animation\"\r\n                id=\"new-quote\"\r\n                onClick={this.handleNewQuote}\r\n                style={{ backgroundColor: randomColor }}\r\n              >\r\n                New Quote\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport Quotes from \"./Quotes\";\r\nimport { fetchQuotes, newQuote } from \"../redux/actions/actionCreators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    quotes: state.quotes,\r\n    isFetching: state.isFetching,\r\n    randomIndex: state.randomIndex,\r\n    colors: state.colors,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchQuotes: () => dispatch(fetchQuotes()),\r\n    newQuote: (randomIndex) => dispatch(newQuote(randomIndex)),\r\n  };\r\n};\r\n\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Quotes);\r\n\r\nexport default Container;\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const fetchQuotes = () => (dispatch) => {\r\n  fetch(\r\n    \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n  )\r\n    .then((resp) => resp.json())\r\n    .then((data) =>\r\n      dispatch({ type: actionTypes.FETCH_QUOTES, payload: data.quotes })\r\n    );\r\n};\r\n\r\nexport const newQuote = (randomIndex) => ({\r\n  type: actionTypes.NEW_QUOTE,\r\n  payload: randomIndex,\r\n});\r\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Container from \"./components/Container\";\nimport \"./style.scss\"\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container />\n      </Provider>\n    );\n  }\n}\n"],"sourceRoot":""}